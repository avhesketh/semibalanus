?as.Date
?strptime
unite(c(date,time), col = "datetime", sep = " ") %>% mutate(datetime = strptime(datetime, format = "%Y-%m-%d %I:%M %p")
RP_tides <- read_csv("./raw_data/hot_hour_low_hour/RP_tides_summ19.csv") %>% unite(c(year,month,day), col = "date", sep = "-",
remove = F) %>%
unite(c(date,time), col = "datetime", sep = " ") %>% mutate(datetime = strptime(datetime, format = "%Y-%m-%d %I:%M %p"))
View(RP_tides)
RP_tides <- read_csv("./raw_data/hot_hour_low_hour/RP_tides_summ19.csv") %>% unite(c(year,month,day), col = "date", sep = "-",
remove = F) %>%
unite(c(date,time), col = "datetime", sep = " ") %>% mutate(datetime = ymd_hms(strptime(datetime, format = "%Y-%m-%d %I:%M %p")))
RP_tides <- read_csv("./raw_data/hot_hour_low_hour/RP_tides_summ19.csv") %>% unite(c(year,month,day), col = "date", sep = "-") %>%
unite(c(date,time), col = "datetime", sep = " ", remove = F) %>%
mutate(datetime = ymd_hms(strptime(datetime, format = "%Y-%m-%d %I:%M %p"))) %>%
group_by(date) %>% mutate(low_tide = min(height_m)) %>% ungroup() %>%
filter(height_m == low_tide) %>% mutate(hour = hour(datetime))
RP_tides <- read_csv("./raw_data/hot_hour_low_hour/RP_tides_summ19.csv") %>% unite(c(year,month,day), col = "date", sep = "-") %>%
unite(c(date,time), col = "datetime", sep = " ", remove = F) %>%
mutate(datetime = ymd_hms(strptime(datetime, format = "%Y-%m-%d %I:%M %p"))) %>%
group_by(date) %>% mutate(low_tide = min(height_m)) %>% ungroup() %>%
filter(height_m == low_tide) %>% mutate(hour = hour(datetime), date = ymd(date)) %>%
select(date, low_hour, low_tide)
RP_tides <- read_csv("./raw_data/hot_hour_low_hour/RP_tides_summ19.csv") %>% unite(c(year,month,day), col = "date", sep = "-") %>%
unite(c(date,time), col = "datetime", sep = " ", remove = F) %>%
mutate(datetime = ymd_hms(strptime(datetime, format = "%Y-%m-%d %I:%M %p"))) %>%
group_by(date) %>% mutate(low_tide = min(height_m)) %>% ungroup() %>%
filter(height_m == low_tide) %>% mutate(low_hour = hour(datetime), date = ymd(date)) %>%
select(date, low_hour, low_tide)
write_csv(temp.clean, "../clean_data/SBHW_temp_clean.csv")
ibutton_CC_2020 <- read_csv("./clean_data/SBHW_temp_clean.csv")
View(ibutton_CC_2020)
ibutton_CC_2020 <- read_csv("./clean_data/SBHW_temp_clean.csv") %>%
filter(treatment == "UI" | treatment == "UR") %>%
mutate(date = ymd(date_time), hour = hour(date_time)) %>%
group_by(date) %>% mutate(max_temp = max(temperature_C)) %>% ungroup() %>%
filter(temperature_C = max_temp) %>% select(date, hour, max_temp) %>%
rename(hottest_hour = hour)
ibutton_CC_2020 <- read_csv("./clean_data/SBHW_temp_clean.csv") %>%
filter(treatment == "UI" | treatment == "UR") %>%
mutate(date = ymd(date_time), hour = hour(date_time))
class(ibutton_CC_2020$date_time)
ibutton_CC_2020 <- read_csv("./clean_data/SBHW_temp_clean.csv") %>%
filter(treatment == "UI" | treatment == "UR") %>%
mutate(date = date(date_time), hour = hour(date_time)) %>%
group_by(date) %>% mutate(max_temp = max(temperature_C)) %>% ungroup() %>%
filter(temperature_C = max_temp) %>% select(date, hour, max_temp) %>%
rename(hottest_hour = hour)
ibutton_CC_2020 <- read_csv("./clean_data/SBHW_temp_clean.csv") %>%
filter(treatment == "UI" | treatment == "UR") %>%
mutate(date = date(date_time), hour = hour(date_time)) %>%
group_by(date) %>% mutate(max_temp = max(temperature_C)) %>% ungroup() %>%
filter(temperature_C == max_temp) %>% select(date, hour, max_temp) %>%
rename(hottest_hour = hour)
hot_low_RP <- daily_max %>% full_join(RP_tides)
View(hot_low_RP)
RP_tides <- read_csv("./raw_data/hot_hour_low_hour/RP_tides_summ19.csv") %>% unite(c(year,month,day), col = "date", sep = "-") %>%
unite(c(date,time), col = "datetime", sep = " ", remove = F) %>%
mutate(datetime = ymd_hms(strptime(datetime, format = "%Y-%m-%d %I:%M %p"))) %>%
group_by(date) %>% mutate(low_tide = min(height_m)) %>% ungroup() %>%
filter(height_m == low_tide) %>% mutate(low_hour = hour(datetime), date = ymd(date)) %>%
select(date, low_hour, low_tide) %>% group_by(date) %>% mutate(low_hour = mean(low_hour))
hot_low_RP <- daily_max %>% full_join(RP_tides)
daily_max <- ibutton_rock_summer %>% mutate(date = date(date_time), hour = hour(date_time)) %>%
group_by(date) %>% mutate(max_temp = max(temp)) %>%
ungroup() %>% filter(temp == max_temp) %>% select(date, hour, max_temp) %>%
rename(hottest_hour = hour) %>% group_by(date) %>% mutate(hottest_hour = mean(hottest_hour))
hot_low_RP <- daily_max %>% full_join(RP_tides)
hot_low_RP <- daily_max %>% full_join(RP_tides) %>% unique()
RP_tides <- read_csv("./raw_data/hot_hour_low_hour/RP_tides_summ19.csv") %>% unite(c(year,month,day), col = "date", sep = "-") %>%
unite(c(date,time), col = "datetime", sep = " ", remove = F) %>%
mutate(datetime = ymd_hms(strptime(datetime, format = "%Y-%m-%d %I:%M %p"))) %>%
group_by(date) %>% mutate(low_tide = min(height_m)) %>% ungroup() %>%
filter(height_m == low_tide) %>% mutate(low_time = hms(datetime), date = ymd(date)) %>%
select(date, low_hour, low_tide) %>% group_by(date) %>% mutate(low_hour = mean(low_hour))
RP_tides <- read_csv("./raw_data/hot_hour_low_hour/RP_tides_summ19.csv") %>% unite(c(year,month,day), col = "date", sep = "-") %>%
unite(c(date,time), col = "datetime", sep = " ", remove = F) %>%
mutate(datetime = ymd_hms(strptime(datetime, format = "%Y-%m-%d %I:%M %p"))) %>%
group_by(date) %>% mutate(low_tide = min(height_m)) %>% ungroup() %>%
filter(height_m == low_tide) %>% mutate(low_time = time(datetime), date = ymd(date)) %>%
select(date, low_hour, low_tide) %>% group_by(date) %>% mutate(low_hour = mean(low_hour))
RP_tides <- read_csv("./raw_data/hot_hour_low_hour/RP_tides_summ19.csv") %>% unite(c(year,month,day), col = "date", sep = "-") %>%
unite(c(date,time), col = "datetime", sep = " ", remove = F) %>%
mutate(datetime = ymd_hms(strptime(datetime, format = "%Y-%m-%d %I:%M %p"))) %>%
group_by(date) %>% mutate(low_tide = min(height_m)) %>% ungroup() %>%
filter(height_m == low_tide) %>% mutate(low_time = time(datetime), date = ymd(date)) %>%
select(date, low_time, low_tide) %>% group_by(date) %>% mutate(low_time = mean(low_time))
hot_low_RP <- daily_max %>% full_join(RP_tides) %>% unique()
RP_tides <- read_csv("./raw_data/hot_hour_low_hour/RP_tides_summ19.csv") %>% unite(c(year,month,day), col = "date", sep = "-") %>%
unite(c(date,time), col = "datetime", sep = " ", remove = F) %>%
mutate(datetime = ymd_hms(strptime(datetime, format = "%Y-%m-%d %I:%M %p"))) %>%
group_by(date) %>% mutate(low_tide = min(height_m)) %>% ungroup() %>%
filter(height_m == low_tide) %>% mutate(low_time = time(datetime), date = ymd(date)) %>%
select(date, low_time, low_tide)
View(RP_tides)
RP_tides <- read_csv("./raw_data/hot_hour_low_hour/RP_tides_summ19.csv") %>% unite(c(year,month,day), col = "date", sep = "-") %>%
mutate(time = strptime(time, format = "%I:%M %p")))
RP_tides <- read_csv("./raw_data/hot_hour_low_hour/RP_tides_summ19.csv") %>% unite(c(year,month,day), col = "date", sep = "-") %>%
mutate(time = strptime(time, format = "%I:%M %p"))
RP_tides <- read_csv("./raw_data/hot_hour_low_hour/RP_tides_summ19.csv") %>% unite(c(year,month,day), col = "date", sep = "-") %>%
unite(c(date,time), col = "datetime", sep = " ", remove = F) %>%
mutate(datetime = ymd_hms(strptime(datetime, format = "%Y-%m-%d %I:%M %p"))) %>%
group_by(date) %>% mutate(low_tide = min(height_m)) %>% ungroup()
RP_tides <- read_csv("./raw_data/hot_hour_low_hour/RP_tides_summ19.csv") %>% unite(c(year,month,day), col = "date", sep = "-") %>%
unite(c(date,time), col = "datetime", sep = " ", remove = F) %>%
mutate(datetime = ymd_hms(strptime(datetime, format = "%Y-%m-%d %I:%M %p"))) %>%
group_by(date) %>% mutate(low_tide = min(height_m)) %>% ungroup() %>%
filter(height_m == low_tide)
RP_tides <- read_csv("./raw_data/hot_hour_low_hour/RP_tides_summ19.csv") %>% unite(c(year,month,day), col = "date", sep = "-") %>%
unite(c(date,time), col = "datetime", sep = " ", remove = F) %>%
mutate(datetime = ymd_hms(strptime(datetime, format = "%Y-%m-%d %I:%M %p"))) %>%
group_by(date) %>% mutate(low_tide = min(height_m)) %>% ungroup() %>%
filter(height_m == low_tide) %>% mutate(date = ymd(date))
RP_tides <- read_csv("./raw_data/hot_hour_low_hour/RP_tides_summ19.csv") %>% unite(c(year,month,day), col = "date", sep = "-") %>%
unite(c(date,time), col = "datetime", sep = " ", remove = F) %>%
mutate(datetime = ymd_hms(strptime(datetime, format = "%Y-%m-%d %I:%M %p"))) %>%
group_by(date) %>% mutate(low_tide = min(height_m)) %>% ungroup() %>%
filter(height_m == low_tide) %>% mutate(date = ymd(date)) %>% select(-time)
RP_tides <- read_csv("./raw_data/hot_hour_low_hour/RP_tides_summ19.csv") %>% unite(c(year,month,day), col = "date", sep = "-") %>%
unite(c(date,time), col = "datetime", sep = " ", remove = F) %>%
mutate(datetime = ymd_hms(strptime(datetime, format = "%Y-%m-%d %I:%M %p"))) %>%
group_by(date) %>% mutate(low_tide = min(height_m)) %>% ungroup() %>%
filter(height_m == low_tide) %>% mutate(date = ymd(date)) %>% select(-time) %>%
mutate(time = hms(datetime))
RP_tides <- read_csv("./raw_data/hot_hour_low_hour/RP_tides_summ19.csv") %>% unite(c(year,month,day), col = "date", sep = "-") %>%
unite(c(date,time), col = "datetime", sep = " ", remove = F) %>%
mutate(datetime = ymd_hms(strptime(datetime, format = "%Y-%m-%d %I:%M %p"))) %>%
group_by(date) %>% mutate(low_tide = min(height_m)) %>% ungroup() %>%
filter(height_m == low_tide) %>% mutate(date = ymd(date)) %>% select(-time) %>%
mutate(hour = hour(datetime), minutes = minutes(datetime))
RP_tides <- read_csv("./raw_data/hot_hour_low_hour/RP_tides_summ19.csv") %>% unite(c(year,month,day), col = "date", sep = "-") %>%
unite(c(date,time), col = "datetime", sep = " ", remove = F) %>%
mutate(datetime = ymd_hms(strptime(datetime, format = "%Y-%m-%d %I:%M %p"))) %>%
group_by(date) %>% mutate(low_tide = min(height_m)) %>% ungroup() %>%
filter(height_m == low_tide) %>% mutate(date = ymd(date)) %>% select(-time) %>%
mutate(hour = hour(datetime), minutes = minute(datetime))
RP_tides <- read_csv("./raw_data/hot_hour_low_hour/RP_tides_summ19.csv") %>% unite(c(year,month,day), col = "date", sep = "-") %>%
unite(c(date,time), col = "datetime", sep = " ", remove = F) %>%
mutate(datetime = ymd_hms(strptime(datetime, format = "%Y-%m-%d %I:%M %p"))) %>%
group_by(date) %>% mutate(low_tide = min(height_m)) %>% ungroup() %>%
filter(height_m == low_tide) %>% mutate(date = ymd(date)) %>% select(-time) %>%
mutate(hour = hour(datetime), minutes = minute(datetime)/60)
RP_tides <- read_csv("./raw_data/hot_hour_low_hour/RP_tides_summ19.csv") %>% unite(c(year,month,day), col = "date", sep = "-") %>%
unite(c(date,time), col = "datetime", sep = " ", remove = F) %>%
mutate(datetime = ymd_hms(strptime(datetime, format = "%Y-%m-%d %I:%M %p"))) %>%
group_by(date) %>% mutate(low_tide = min(height_m)) %>% ungroup() %>%
filter(height_m == low_tide) %>% mutate(date = ymd(date)) %>% select(-time) %>%
mutate(hour = hour(datetime), minutes = minute(datetime)/60) %>%
mutate(low_time = hour+minutes) %>%
select(date, low_time, low_tide)
hot_low_RP <- daily_max %>% full_join(RP_tides) %>% unique()
ibutton_CC_2020 <- read_csv("./clean_data/SBHW_temp_clean.csv") %>%
filter(treatment == "UI" | treatment == "UR") %>%
mutate(date = date(date_time), hour = hour(date_time)) %>%
group_by(date) %>% mutate(max_temp = max(temperature_C)) %>% ungroup() %>%
filter(temperature_C == max_temp) %>% select(date, hour, max_temp) %>%
rename(hottest_hour = hour)
ibutton_CC_2020 <- read_csv("./clean_data/SBHW_temp_clean.csv") %>%
filter(treatment == "UI" | treatment == "UR") %>%
mutate(date = date(date_time), hour = hour(date_time), minutes = minute(date_time)/60) %>%
group_by(date) %>% mutate(max_temp = max(temperature_C)) %>% ungroup() %>%
filter(temperature_C == max_temp) %>% mutate(low_time = hour+minutes) %>%
select(date, low_time, max_temp)
ibutton_CC_2020 <- read_csv("./clean_data/SBHW_temp_clean.csv") %>%
filter(treatment == "UI" | treatment == "UR") %>%
mutate(date = date(date_time), hour = hour(date_time)) %>%
group_by(date) %>% mutate(max_temp = max(temperature_C)) %>% ungroup() %>%
filter(temperature_C == max_temp) %>% select(date, hour, max_temp) %>%
rename(hottest_hour = hour)
ibutton_CC_2021 <- read_csv("./clean_data/SBHW_temp_clean.csv") %>%
filter(month(date_time) > 5 & month(date_time) < 9) %>%
filter(treatment == "UI" | treatment == "UR") %>%
mutate(date = date(date_time), hour = hour(date_time)) %>%
group_by(date) %>% mutate(max_temp = max(temperature_C)) %>% ungroup() %>%
filter(temperature_C == max_temp) %>% select(date, hour, max_temp) %>%
rename(hottest_hour = hour)
CC_tides <- read_delim("./raw_data/hot_hour_low_hour/CC_tides_summ21.csv",
colnames = c("date", "time", "height_m","type"))
CC_tides <- read_delim("./raw_data/hot_hour_low_hour/CC_tides_summ21.csv",
col_names = c("date", "time", "height_m","type"))
View(CC_tides)
CC_tides <- read_delim("./raw_data/hot_hour_low_hour/CC_tides_summ21.csv",
col_names = c("date", "time", "height_m","type"),
delim = "ws")
CC_tides <- read_delim("./raw_data/hot_hour_low_hour/CC_tides_summ21.csv",
col_names = c("date", "time", "height_m","type"),
delim = "  ")
CC_tides <- read_delim("./raw_data/hot_hour_low_hour/CC_tides_summ21.csv",
col_names = c("date", "time", "na", "height_m","type"),
delim = "  ")
CC_tides <- read_delim("./raw_data/hot_hour_low_hour/CC_tides_summ21.csv",
col_names = c("date", "time", "na", "height_m","type"),
delim = "  ") %>%
filter(type == "Low Tide")
CC_tides <- read_delim("./raw_data/hot_hour_low_hour/CC_tides_summ21.csv",
col_names = c("date", "time", "na", "height_m","type"),
delim = "  ") %>%
filter(type == "Low Tide") %>% select(-type, -na)
CC_tides <- read_delim("./raw_data/hot_hour_low_hour/CC_tides_summ21.csv",
col_names = c("date", "time", "na", "height_m","type"),
delim = "  ") %>%
filter(type == "Low Tide") %>% select(-type, -na) %>%
mutate(hour = hour(time))
CC_tides <- read_delim("./raw_data/hot_hour_low_hour/CC_tides_summ21.csv",
col_names = c("date", "time", "na", "height_m","type"),
delim = "  ") %>%
filter(type == "Low Tide") %>% select(-type, -na) %>%
mutate(time = str_remove_all(time, "PDT"), height_m = as.numeric(str_remove_all(height_m, " meters")))
CC_tides <- read_delim("./raw_data/hot_hour_low_hour/CC_tides_summ21.csv",
col_names = c("date", "time", "na", "height_m","type"),
delim = "  ") %>%
filter(type == "Low Tide") %>% select(-type, -na) %>%
mutate(time = str_remove_all(time, " PDT"), height_m = as.numeric(str_remove_all(height_m, " meters"))) %>%
unite(c(date, time), col = "datetime", sep = " ") %>% mutate(datetime = ymd_hms(datetime))
CC_tides <- read_delim("./raw_data/hot_hour_low_hour/CC_tides_summ21.csv",
col_names = c("date", "time", "na", "height_m","type"),
delim = "  ") %>%
filter(type == "Low Tide") %>% select(-type, -na) %>%
mutate(time = str_remove_all(time, " PDT"), height_m = as.numeric(str_remove_all(height_m, " meters"))) %>%
unite(c(date, time), col = "datetime", sep = " ")
CC_tides <- read_delim("./raw_data/hot_hour_low_hour/CC_tides_summ21.csv",
col_names = c("date", "time", "na", "height_m","type"),
delim = "  ") %>%
filter(type == "Low Tide") %>% select(-type, -na) %>%
mutate(time = str_remove_all(time, " PDT"), height_m = as.numeric(str_remove_all(height_m, " meters"))) %>%
unite(c(date, time), col = "datetime", sep = " ") %>% mutate(datetime = ymd_hm(datetime))
CC_tides <- read_delim("./raw_data/hot_hour_low_hour/CC_tides_summ21.csv",
col_names = c("date", "time", "na", "height_m","type"),
delim = "  ") %>%
filter(type == "Low Tide") %>% select(-type, -na) %>%
mutate(time = str_remove_all(time, " PDT"), height_m = as.numeric(str_remove_all(height_m, " meters"))) %>%
unite(c(date, time), col = "datetime", sep = " ") %>% mutate(datetime = ymd_hm(datetime)) %>%
mutate(hour = hour(datetime), minutes = minute(datetime)/60, date = date(datetime)) %>%
mutate(low_time = hour+minutes) %>% select(date, low_time, height_m) %>% rename(low_tide = height_m)
hot_low_CC <- ibutton_CC_2021 %>% full_join(CC_tides)
View(hot_low_CC)
CC_tides <- read_delim("./raw_data/hot_hour_low_hour/CC_tides_summ21.csv",
col_names = c("date", "time", "na", "height_m","type"),
delim = "  ") %>%
filter(type == "Low Tide")
CC_tides <- read_delim("./raw_data/hot_hour_low_hour/CC_tides_summ21.csv",
col_names = c("date", "time", "na", "height_m","type"),
delim = "  ") %>%
filter(type == "Low Tide")  select(-type, -na) %>%
mutate(time = str_remove_all(time, " PDT"), height_m = as.numeric(str_remove_all(height_m, " meters"))) %>%
unite(c(date, time), col = "datetime", sep = " ") %>% mutate(datetime = ymd_hm(datetime)) %>%
mutate(hour = hour(datetime), minutes = minute(datetime)/60, date = date(datetime)) %>%
mutate(low_time = hour+minutes) %>% select(date, low_time, height_m) %>% rename(low_tide = height_m) %>%
group_by(date) %>% mutate(lowest_tide = min(low_tide)) %>% filter(low_tide == lowest_tide)
CC_tides <- read_delim("./raw_data/hot_hour_low_hour/CC_tides_summ21.csv",
col_names = c("date", "time", "na", "height_m","type"),
delim = "  ") %>%
filter(type == "Low Tide")  select(-type, -na) %>%
mutate(time = str_remove_all(time, " PDT"), height_m = as.numeric(str_remove_all(height_m, " meters"))) %>%
unite(c(date, time), col = "datetime", sep = " ") %>% mutate(datetime = ymd_hm(datetime)) %>%
mutate(hour = hour(datetime), minutes = minute(datetime)/60, date = date(datetime)) %>%
mutate(low_time = hour+minutes) %>% select(date, low_time, height_m) %>% rename(low_tide = height_m) %>%
group_by(date) %>% mutate(lowest_tide = min(low_tide)) %>% filter(low_tide == lowest_tide) %>% ungroup()
CC_tides <- read_delim("./raw_data/hot_hour_low_hour/CC_tides_summ21.csv",
col_names = c("date", "time", "na", "height_m","type"),
delim = "  ") %>%
filter(type == "Low Tide")  %>%  select(-type, -na) %>%
mutate(time = str_remove_all(time, " PDT"), height_m = as.numeric(str_remove_all(height_m, " meters"))) %>%
unite(c(date, time), col = "datetime", sep = " ") %>% mutate(datetime = ymd_hm(datetime)) %>%
mutate(hour = hour(datetime), minutes = minute(datetime)/60, date = date(datetime)) %>%
mutate(low_time = hour+minutes) %>% select(date, low_time, height_m) %>% rename(low_tide = height_m) %>%
group_by(date) %>% mutate(lowest_tide = min(low_tide)) %>% filter(low_tide == lowest_tide) %>% ungroup()
CC_tides <- read_delim("./raw_data/hot_hour_low_hour/CC_tides_summ21.csv",
col_names = c("date", "time", "na", "height_m","type"),
delim = "  ") %>%
filter(type == "Low Tide")  %>%  select(-type, -na) %>%
mutate(time = str_remove_all(time, " PDT"), height_m = as.numeric(str_remove_all(height_m, " meters"))) %>%
unite(c(date, time), col = "datetime", sep = " ") %>% mutate(datetime = ymd_hm(datetime)) %>%
mutate(hour = hour(datetime), minutes = minute(datetime)/60, date = date(datetime)) %>%
mutate(low_time = hour+minutes) %>% select(date, low_time, height_m) %>% rename(low_tide = height_m) %>%
group_by(date) %>% mutate(lowest_tide = min(low_tide)) %>% ungroup() %>% filter(low_tide == lowest_tide)
hot_low_CC <- ibutton_CC_2021 %>% full_join(CC_tides)
hot_low_CC <- ibutton_CC_2021 %>% full_join(CC_tides) %>% unique()
ibutton_CC_2021 <- read_csv("./clean_data/SBHW_temp_clean.csv") %>%
filter(month(date_time) > 5 & month(date_time) < 9) %>%
filter(treatment == "UI" | treatment == "UR") %>%
mutate(date = date(date_time), hour = hour(date_time)) %>%
group_by(date) %>% mutate(max_temp = max(temperature_C)) %>% ungroup() %>%
filter(temperature_C == max_temp) %>% select(date, hour, max_temp) %>%
rename(hottest_hour = hour) %>% group_by(date, max_temp) %>% mutate(hottest_hour = mean(hottest_hour))
hot_low_CC <- ibutton_CC_2021 %>% full_join(CC_tides) %>% unique()
hot_low_CC <- ibutton_CC_2021 %>% full_join(CC_tides) %>% unique() %>% na.omit()
hot_low_BP <- read_csv("./raw_data/hot_hour_low_hour/BP_tides_summ06.csv")
hot_low_BP <- read_csv("./raw_data/hot_hour_low_hour/BP_tides_summ06.csv") %>%
mutate(date = as.Date(date, format = "%d-%b-%y"))
View(hot_low_BP)
hot_low_BP$low_time
class(hot_low_BP$low_time)
hot_low_BP <- read_csv("./raw_data/hot_hour_low_hour/BP_tides_summ06.csv") %>%
mutate(date = as.Date(date, format = "%d-%b-%y"))
hot_low_BP <- read_csv("./raw_data/hot_hour_low_hour/BP_tides_summ06.csv") %>%
mutate(date = as.Date(date, format = "%d-%b-%y")) %>%
rename(low_tide = low_time)
print(lm(hottest_hour ~ low_tide, data = hot_low_BP))
print(lm(hottest_hour ~ low_tide, data = hot_low_CC))
lm(hottest_hour ~ low_tide, data = hot_low_CC)
mod < -lm(hottest_hour ~ low_tide, data = hot_low_CC)
mod <- lm(hottest_hour ~ low_tide, data = hot_low_CC)
r2(mod)
summar(mod)
summary(mod)
hot_low_CC <- ibutton_CC_2021 %>% full_join(CC_tides) %>% unique() %>% na.omit() %>%
filter(date >= "2021-06-13" & date <= "2021-07-07")
hot_low_RP <- daily_max %>% full_join(RP_tides) %>% unique() %>%
filter(date >= "2021-06-13" & date <= "2021-07-07")
mod <- lm(hottest_hour ~ low_tide, data = hot_low_CC)
summary(mod)
hot_low_BP <- read_csv("./raw_data/hot_hour_low_hour/BP_tides_summ06.csv") %>%
mutate(date = as.Date(date, format = "%d-%b-%y"))
print(lm(hottest_hour ~ low_time, data = hot_low_BP))
mod <- lm(hottest_hour ~ low_time, data = hot_low_CC)
summary(mod)
mod
lm(hottest_hour ~ low_time, data = hot_low_CC)
lm(hottest_hour ~ low_time, data = hot_low_RP)
View(hot_low_RP)
hot_low_RP <- daily_max %>% full_join(RP_tides) %>% unique() %>%
filter(date >= "2019-06-13" & date <= "2019-07-07")
lm(hottest_hour ~ low_time, data = hot_low_RP)
summary(lm(hottest_hour ~ low_time, data = hot_low_RP))
write_csv(tides_full, "../clean_data/SBHW_tides_clean.csv")
tides <- read_csv("./clean_data/SBHW_tides_clean.csv")
View(tides)
tides <- read_csv("./clean_data/SBHW_tides_clean.csv") %>% group_by(date, site_code) %>%
mutate(lowest_tide = min(tide_height_m)) %>% ungroup() %>%
filter(tide_height_m == lowest_tide) %>% group_by(site_code) %>%
summarize(low_time = mean(hour))
slopes <- c(0.6063, 0.1874, 0.3017)
intercepts <- c(6.7109, 11.3506, 9.8328)
sites <- c("BP","CC","RP")
eq.data <- as.data.frame(sites, slopes,intercepts)
View(eq.data)
eq.data <- as.data.frame(cbind(cbind(sites, slopes),intercepts))
View(eq.data)
tides_cp <- read_delim("../raw_data/tides/tides_CP.csv", col_names = c("date","junk","time","tz","tide_height_m")) %>% mutate(hour = hour(time), site_code = "CP") %>% select(-junk, -tz, -time)
tides_tp <- read_delim("../raw_data/tides/tides_TP.csv", col_names = c("date","junk","time","tz","tide_height_m")) %>% mutate(hour = hour(time), site_code = "TP") %>% select(-junk, -tz, -time)
tides_rest <- read_csv("../raw_data/tides/tides_other_sites.csv") %>% pivot_longer(names_to = "hour", values_to = "tide_height_m", cols = 3:length(.)) %>% mutate(hour = as.integer(hour))
tides_full <- rbind(rbind(tides_cp, tides_tp),tides_rest)
write_csv(tides_full, "../clean_data/SBHW_tides_clean.csv")
tides <- read_csv("./clean_data/SBHW_tides_clean.csv") %>% group_by(date, site_code) %>%
mutate(lowest_tide = min(tide_height_m)) %>% ungroup() %>%
filter(tide_height_m == lowest_tide) %>% group_by(site_code) %>%
summarize(low_time = mean(hour)) %>%
mutate(site_code = str_replace_all(site_code, c("CP" = "CC", "WA"="WB"))) %>%
filter(site_code %in% c("WA","SP","FC","CC","TS","RP"))
hot_hour_estimate <- tides %>%
hot_hour_estimate <- tides %>%
mutate(hot_hour = case_when(site_code %in% c("WA") ~ (low_time*0.6063+6.7109),
site_code %in% c("SP","FC","CC") ~ (low_time*0.1874 + 11.3506),
site_code %in% c("TS","RP") ~ (low_time*0.3017 + 9.8328)))
View(hot_hour_estimate)
tides <- read_csv("./clean_data/SBHW_tides_clean.csv") %>% group_by(date, site_code) %>%
mutate(lowest_tide = min(tide_height_m)) %>% ungroup() %>%
filter(tide_height_m == lowest_tide) %>% group_by(site_code) %>%
summarize(low_time = mean(hour)) %>%
mutate(site_code = str_replace_all(site_code, c("CP" = "CC"))) %>%
filter(site_code %in% c("WB","SP","FC","CC","TS","RP"))
hot_hour_estimate <- tides %>%
mutate(hot_hour = case_when(site_code %in% c("WB") ~ (low_time*0.6063+6.7109),
site_code %in% c("SP","FC","CC") ~ (low_time*0.1874 + 11.3506),
site_code %in% c("TS","RP") ~ (low_time*0.3017 + 9.8328)))
hot_hour_estimate <- tides %>%
mutate(hot_hour = case_when(site_code %in% c("WB") ~ (low_time*0.6063+6.7109),
site_code %in% c("SP","FC","CC") ~ (low_time*0.1874 + 11.3506),
site_code %in% c("TS","RP") ~ (low_time*0.3017 + 9.8328))) %>%
mutate(minutes = hms(hot_hour))
hot_hour_estimate <- tides %>%
mutate(hot_hour = case_when(site_code %in% c("WB") ~ (low_time*0.6063+6.7109),
site_code %in% c("SP","FC","CC") ~ (low_time*0.1874 + 11.3506),
site_code %in% c("TS","RP") ~ (low_time*0.3017 + 9.8328))) %>%
mutate(minutes = as.Date(hot_hour))
mutate(minutes = substr(as.character(hot_hour), 4,8)
hot_hour_estimate <- tides %>%
mutate(hot_hour = case_when(site_code %in% c("WB") ~ (low_time*0.6063+6.7109),
site_code %in% c("SP","FC","CC") ~ (low_time*0.1874 + 11.3506),
site_code %in% c("TS","RP") ~ (low_time*0.3017 + 9.8328))) %>%
mutate(minutes = substr(as.character(hot_hour), 4,8))
hot_hour_estimate <- tides %>%
mutate(hot_hour = case_when(site_code %in% c("WB") ~ (low_time*0.6063+6.7109),
site_code %in% c("SP","FC","CC") ~ (low_time*0.1874 + 11.3506),
site_code %in% c("TS","RP") ~ (low_time*0.3017 + 9.8328))) %>%
mutate(minutes = as.numeric(substr(as.character(hot_hour), 3,8))*60)
angle.data <- read_csv("../raw_data/mortality/SBC_MORT_angles.csv")
site.info <- read_csv("../raw_data/SBC_siteinformation.csv") %>% select(site_code,angles,solar_elevation, solar_azimuth) %>% na.omit() %>% select(-angles)
#join together the dataframes
angle.calculate <- angle.data %>% full_join(site.info)
# the compass orientation needs to be flipped by 180 degrees/pi radians
# the angle needs to be converted from angle from vertical to angle from horizontal
angle.correct <- angle.calculate %>% mutate(orient_rad = (((orientation_raw_degrees/360)*2*pi)-pi), prop_mort = number_dead/(number_live + number_dead), sigma = ((90-angle_raw_degrees)/360)*2*pi, beta = (solar_elevation/360)*2*pi, solar_az_rad = (solar_azimuth/360)*2*pi)
solar.angles <- angle.correct %>% mutate(gamma = abs(orient_rad - solar_az_rad)) %>% mutate(theta = acos(sin(beta)*cos(sigma) + cos(gamma)*cos(beta)*sin(sigma))) %>% mutate(angle = (theta/(2*pi)*360)) %>%
select(prop_mort, angle, site_code)
ggplot(data = solar.angles, aes(x = angle, y = prop_mort, col = site_code)) + geom_point() + labs(y = "Proportion mortality", x = "Solar angle (degrees)", col = "site") + theme_classic() + geom_smooth(method = "lm", se=F) + theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14))
solar.angles <- angle.correct %>% mutate(gamma = abs(orient_rad - solar_az_rad)) %>% mutate(theta = acos(sin(beta)*cos(sigma) + cos(gamma)*cos(beta)*sin(sigma))) %>% mutate(angle = (theta/(2*pi)*360)) %>%
select(prop_mort, angle, site_code) %>% mutate(site_code == str_replace_all(site_code, "WA","WB"))
ggplot(data = solar.angles, aes(x = angle, y = prop_mort, col = site_code)) + geom_point() + labs(y = "Proportion mortality", x = "Solar angle (degrees)", col = "site") + theme_classic() + geom_smooth(method = "lm", se=F) + theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14))
solar.angles <- angle.correct %>% mutate(gamma = abs(orient_rad - solar_az_rad)) %>% mutate(theta = acos(sin(beta)*cos(sigma) + cos(gamma)*cos(beta)*sin(sigma))) %>% mutate(angle = (theta/(2*pi)*360)) %>%
select(prop_mort, angle, site_code) %>% mutate(site_code == str_replace_all(site_code, "WA","WB"))
solar.angles <- angle.correct %>% mutate(gamma = abs(orient_rad - solar_az_rad)) %>% mutate(theta = acos(sin(beta)*cos(sigma) + cos(gamma)*cos(beta)*sin(sigma))) %>% mutate(angle = (theta/(2*pi)*360)) %>%
select(prop_mort, angle, site_code) %>% mutate(site_code = str_replace_all(site_code, "WA","WB"))
ggplot(data = solar.angles, aes(x = angle, y = prop_mort, col = site_code)) + geom_point() + labs(y = "Proportion mortality", x = "Solar angle (degrees)", col = "site") + theme_classic() + geom_smooth(method = "lm", se=F) + theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14))
ggplot(data = solar.angles, aes(x = angle, y = prop_mort, col = site_code)) + geom_point() + labs(y = "Proportion mortality", x = "Solar angle (degrees)", col = "Site") + theme_classic() + geom_smooth(method = "lm", se=F) + theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14))
angle.transform <- solar.angles %>% mutate(mort_beta = (prop_mort*(length(prop_mort)-1) + 0.5)/length(prop_mort), mort_percent = 100*prop_mort)
angle.model.0 <- lmer(prop_mort ~ angle + (1|site_code), data = angle.transform)
library(glmmTMB
library(glmmTMB)
library(glmmTMB)
angle.model.1 <- glmmTMB(mort_beta ~ angle + (1|site_code), data = angle.transform, family = beta_family())
plot(simulateResiduals(angle.model.1))
library(DHARMa)
plot(simulateResiduals(angle.model.1))
angle.model.2 <- glmmTMB(mort_percent ~ angle + (1|site_code), data = angle.transform,family = tweedie())
angle.model.2 <- glmmTMB(mort_percent ~ angle + (1|site_code), data = angle.transform,family = tweedie())
plot(simulateResiduals(angle.model.2))
angle.model.2 <- glmmTMB(mort_percent ~ angle + (1|site_code), data = angle.transform, dispformula = ~angle, family = tweedie())
plot(simulateResiduals(angle.model.2))
angle.model.2 <- glmmTMB(mort_percent ~ angle + (1|site_code), data = angle.transform, dispformula = ~site_code, family = tweedie())
plot(simulateResiduals(angle.model.2))
angle.model.2 <- glmmTMB(mort_percent ~ angle + (1|site_code), data = angle.transform, family = tweedie())
summary(angle.model.2)
Anova(angle.model.2)
ggplot(data = solar.angles, aes(x = angle, y = prop_mort, col = site_code)) + geom_point() + labs(y = "Proportion mortality", x = "Substratum orientation (relative to direct sun = 0º)", col = "Site") + theme_classic() + geom_smooth(method = "lm", se=F) + theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14))
pal <- colorRampPalette(brewer.pal(8, "Dark2"))(13))
pal <- colorRampPalette(brewer.pal(8, "Dark2"))(13)
ggplot(data = solar.angles, aes(x = angle, y = prop_mort, col = site_code)) + geom_point() + labs(y = "Proportion mortality", x = "Substratum orientation (relative to direct sun = 0º)", col = "Site") + theme_classic() + scale_col_brewer(values = pal) + geom_smooth(method = "lm", se=F) + theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14))
ggplot(data = solar.angles, aes(x = angle, y = prop_mort, col = site_code)) + geom_point() + labs(y = "Proportion mortality", x = "Substratum orientation (relative to direct sun = 0º)", col = "Site") + theme_classic() + scale_color_brewer(values = pal) + geom_smooth(method = "lm", se=F) + theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14))
pal <- colorRampPalette(brewer.pal(6, "Dark2"))(6)
ggplot(data = solar.angles, aes(x = angle, y = prop_mort, col = site_code)) + geom_point() + labs(y = "Proportion mortality", x = "Substratum orientation (relative to direct sun = 0º)", col = "Site") + theme_classic() + scale_color_brewer(values = pal) + geom_smooth(method = "lm", se=F) + theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14))
ggplot(data = solar.angles, aes(x = angle, y = prop_mort, col = site_code)) + geom_point() + labs(y = "Proportion mortality", x = "Substratum orientation (relative to direct sun = 0º)", col = "Site") + theme_classic() + scale_color_manual(values = pal) + geom_smooth(method = "lm", se=F) + theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14))
ggplot(data = solar.angles, aes(x = angle, y = prop_mort*100, col = site_code)) + geom_point() + labs(y = "Mortality (%)", x = "Substratum orientation (relative to direct sun = 0º)", col = "Site") + theme_classic() + scale_color_manual(values = pal) + geom_smooth(method = "lm", se=F) + theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14))
model.pred <- predict(angle.model.2)
ggplot(data = solar.angles, aes(x = angle, y = prop_mort*100, col = site_code)) + geom_point() + labs(y = "Mortality (%)", x = "Substratum orientation (relative to direct sun = 0º)", col = "Site") + theme_classic() + scale_color_manual(values = pal) + geom_smooth(aes(y = model.pred), method = "smooth", se=F) + theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14))
ggplot(data = solar.angles, aes(x = angle, y = prop_mort*100, col = site_code)) + geom_point() + labs(y = "Mortality (%)", x = "Substratum orientation (relative to direct sun = 0º)", col = "Site") + theme_classic() + scale_color_manual(values = pal) + geom_smooth(aes(y = model.pred), method = "lm", se=F) + theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14))
angle.model.2 <- glmmTMB(mort_percent ~ angle + (angle|site_code), data = angle.transform, family = tweedie())
plot(simulateResiduals(angle.model.2))
angle.model.2 <- glmmTMB(mort_percent ~ angle + (1+angle|site_code), data = angle.transform, family = tweedie())
plot(simulateResiduals(angle.model.2))
angle.model.0 <- lmer(prop_mort ~ angle + (1+angle|site_code), data = angle.transform)
library(lme4)
angle.model.0 <- lmer(prop_mort ~ angle + (1+angle|site_code), data = angle.transform)
angle.model.0 <- lmer(mort_percent ~ angle + (1+angle|site_code), data = angle.transform)
angle.model.2 <- glmmTMB(mort_percent ~ angle + (1|site_code), data = angle.transform, family = tweedie())
plot(simulateResiduals(angle.model.2))
angle.model.1 <- glmmTMB(mort_beta ~ angle + (1|site_code), data = angle.transform, family = beta_family())
angle.model.1 <- glmmTMB(mort_beta ~ angle + (1+angle|site_code), data = angle.transform, family = beta_family())
plot(simulateResiduals(angle.model.1))
angle.model.2 <- glmmTMB(mort_percent ~ angle + (1|site_code), data = angle.transform, family = tweedie())
plot(simulateResiduals(angle.model.2))
summary(angle.model.2)
set.seed(26)
install.packages("ggpredict")
library(ggpredict)
library(ggeffects)
install.packages("ggeffects")
library(ggeffects)
model.pred <- ggpredict(angle.model.2, c("angle"))
View(model.pred)
model.pred <- ggpredict(angle.model.2, terms = c("angle", "site_code"))
ggplot(data = solar.angles, aes(x = angle, y = prop_mort*100, col = site_code)) + geom_point() + labs(y = "Mortality (%)", x = "Substratum orientation (relative to direct sun = 0º)", col = "Site") + theme_classic() + scale_color_manual(values = pal) + geom_smooth(model.pred, aes(x = x, y = predicted, color = site_code) + geom_ribbon(model.pred, aes(ymax = conf.high, ymin = conf.low, fill = site_code), alpha = 0.1) + theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14))
ggplot(data = solar.angles, aes(x = angle, y = prop_mort*100, col = site_code)) + geom_point() + labs(y = "Mortality (%)", x = "Substratum orientation (relative to direct sun = 0º)", col = "Site") + theme_classic() + scale_color_manual(values = pal) + scale_fill_manual(values = pal) + geom_smooth(model.pred, aes(x = x, y = predicted, color = site_code)) + geom_ribbon(model.pred, aes(ymax = conf.high, ymin = conf.low, fill = site_code), alpha = 0.1) + theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14))
ggplot(data = solar.angles, aes(x = angle, y = prop_mort*100, col = site_code)) + geom_point() + labs(y = "Mortality (%)", x = "Substratum orientation (relative to direct sun = 0º)", col = "Site") + theme_classic() + scale_color_manual(values = pal) + scale_fill_manual(values = pal) + geom_line(model.pred, aes(x = x, y = predicted, color = site_code)) + geom_ribbon(model.pred, aes(ymax = conf.high, ymin = conf.low, fill = site_code), alpha = 0.1) + theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14))
ggplot(data = solar.angles, aes(x = angle, y = prop_mort*100, col = site_code)) + geom_point() + labs(y = "Mortality (%)", x = "Substratum orientation (relative to direct sun = 0º)", col = "Site") + theme_classic() + scale_color_manual(values = pal) + scale_fill_manual(values = pal) + geom_line(data = model.pred, aes(x = x, y = predicted, color = site_code)) + geom_ribbon(data = model.pred, aes(ymax = conf.high, ymin = conf.low, fill = site_code), alpha = 0.1) + theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14))
ggplot(data = solar.angles, aes(x = angle, y = prop_mort*100, col = site_code)) + geom_point() + labs(y = "Mortality (%)", x = "Substratum orientation (relative to direct sun = 0º)", col = "Site") + theme_classic() + scale_color_manual(values = pal) + scale_fill_manual(values = pal) + geom_line(data = model.pred, aes(x = x, y = predicted, color = group)) + geom_ribbon(data = model.pred, aes(ymax = conf.high, ymin = conf.low, fill = group), alpha = 0.1) + theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14))
ggplot(data = solar.angles, aes(x = angle, y = prop_mort*100, col = site_code)) + geom_point() + labs(y = "Mortality (%)", x = "Substratum orientation (relative to direct sun = 0º)", col = "Site") + theme_classic() + scale_color_manual(values = pal) + scale_fill_manual(values = pal) + geom_line(data = model.pred, aes(x = x, y = predicted, color = group)) + geom_ribbon(data = model.pred, aes(ymax = conf.high, ymin = conf.low, x = x, fill = group), alpha = 0.1) + theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14))
ggplot(data = solar.angles, aes(x = angle, y = prop_mort*100, col = site_code)) + geom_point() + labs(y = "Mortality (%)", x = "Substratum orientation (relative to direct sun = 0º)", col = "Site") + theme_classic() + scale_color_manual(values = pal) + scale_fill_manual(values = pal) + geom_line(data = model.pred, aes(x = x, y = predicted, color = group)) + geom_ribbon(data = model.pred, aes(ymax = conf.high, ymin = conf.low, x = x, y = predicted, fill = group), alpha = 0.1) + theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14))
ggplot(data = solar.angles, aes(x = angle, y = prop_mort*100, col = site_code)) + geom_point() + labs(y = "Mortality (%)", x = "Substratum orientation (relative to direct sun = 0º)", col = "Site") + theme_classic() + scale_color_manual(values = pal) + scale_fill_manual(values = pal) + geom_line(data = model.pred, aes(x = x, y = predicted, col = group)) + geom_ribbon(data = model.pred, aes(ymax = conf.high, ymin = conf.low, x = x, y = predicted, fill = group), alpha = 0.1) + theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14))
ggplot(data = solar.angles, aes(x = angle, y = prop_mort*100, col = site_code)) + geom_point() + labs(y = "Mortality (%)", x = "Substratum orientation (relative to direct sun = 0º)", col = "Site") + theme_classic() + scale_color_manual(values = pal) + scale_fill_manual(values = pal) + geom_line(data = model.pred, aes(x = x, y = predicted)) + geom_ribbon(data = model.pred, aes(ymax = conf.high, ymin = conf.low, x = x, y = predicted, fill = group), alpha = 0.1) + theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14))
View(solar.angles)
ggplot(data = solar.angles %>% rename(group = site_code), aes(x = angle, y = prop_mort*100, col = site_code)) + geom_point() + labs(y = "Mortality (%)", x = "Substratum orientation (relative to direct sun = 0º)", col = "Site") + theme_classic() + scale_color_manual(values = pal) + scale_fill_manual(values = pal) + geom_line(data = model.pred, aes(x = x, y = predicted)) + geom_ribbon(data = model.pred, aes(ymax = conf.high, ymin = conf.low, x = x, y = predicted, fill = group), alpha = 0.1) + theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14))
ggplot(data = solar.angles %>% rename(group = site_code), aes(x = angle, y = prop_mort*100, col = group)) + geom_point() + labs(y = "Mortality (%)", x = "Substratum orientation (relative to direct sun = 0º)", col = "Site") + theme_classic() + scale_color_manual(values = pal) + scale_fill_manual(values = pal) + geom_line(data = model.pred, aes(x = x, y = predicted)) + geom_ribbon(data = model.pred, aes(ymax = conf.high, ymin = conf.low, x = x, y = predicted, fill = group), alpha = 0.1) + theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14))
model.pred <- ggpredict(angle.model.2, terms = c("angle", "site_code"), type = "random")
ggplot(data = solar.angles %>% rename(group = site_code), aes(x = angle, y = prop_mort*100, col = group)) + geom_point() + labs(y = "Mortality (%)", x = "Substratum orientation (relative to direct sun = 0º)", col = "Site") + theme_classic() + scale_color_manual(values = pal) + scale_fill_manual(values = pal) + geom_line(data = model.pred, aes(x = x, y = predicted)) + geom_ribbon(data = model.pred, aes(ymax = conf.high, ymin = conf.low, x = x, y = predicted, fill = group), alpha = 0.1) + theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14))
ggplot(data = solar.angles %>% rename(group = site_code), aes(x = angle, y = prop_mort, col = group)) + geom_point() + labs(y = "Mortality (%)", x = "Substratum orientation (relative to direct sun = 0º)", col = "Site") + theme_classic() + scale_color_manual(values = pal) + scale_fill_manual(values = pal) + geom_line(data = model.pred, aes(x = x, y = predicted)) + geom_ribbon(data = model.pred, aes(ymax = conf.high, ymin = conf.low, x = x, y = predicted, fill = group), alpha = 0.1) + theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14))
ggplot(data = solar.angles %>% rename(group = site_code), aes(x = angle, y = prop_mort*100, col = group)) + geom_point() + labs(y = "Mortality (%)", x = "Substratum orientation (relative to direct sun = 0º)", col = "Site") + theme_classic() + scale_color_manual(values = pal) + scale_fill_manual(values = pal) + geom_line(data = model.pred, aes(x = x, y = predicted)) + theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14))
library(RColorBrewer)
ggplot(data = solar.angles %>% rename(group = site_code), aes(x = angle, y = prop_mort*100, col = group)) + geom_point() + labs(y = "Mortality (%)", x = "Substratum orientation (relative to direct sun = 0º)", col = "Site") + theme_classic() + scale_color_manual(values = pal) + scale_fill_manual(values = pal) + geom_line(data = model.pred, aes(x = x, y = predicted)) + theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14)) +
ylim(c(0,100))
ggplot(data = solar.angles %>% rename(group = site_code), aes(x = angle, y = prop_mort*100, col = group)) + geom_point(size = 1.5) + labs(y = "Mortality (%)", x = "Substratum orientation (relative to direct sun = 0º)", col = "Site") + theme_classic() + scale_color_manual(values = pal) + scale_fill_manual(values = pal) + geom_line(data = model.pred, aes(x = x, y = predicted), lwd = 1.5) + theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14)) + ylim(c(0,100))
ggplot(data = solar.angles %>% rename(group = site_code), aes(x = angle, y = prop_mort*100, col = group)) + geom_point(size = 2) + labs(y = "Mortality (%)", x = "Substratum orientation (relative to direct sun = 0º)", col = "Site") + theme_classic() + scale_color_manual(values = pal) + scale_fill_manual(values = pal) + geom_line(data = model.pred, aes(x = x, y = predicted)) + theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14)) + ylim(c(0,100))
angle.model.2 <- glmmTMB(prop_mort ~ angle + (1|site_code), data = angle.transform, family = binomial(link = "logit"))
library(glmmTMB)
angle.model.2 <- glmmTMB(prop_mort ~ angle + (1|site_code), data = angle.transform, family = binomial(link = "logit"))
library(DHARMa)
plot(simulateResiduals(angle.model.2))
angle.model.2 <- glmmTMB(prop_mort ~ angle + (1+ angle|site_code), data = angle.transform, family = binomial(link = "logit"))
plot(simulateResiduals(angle.model.2))
angle.model.2 <- glmmTMB(prop_mort ~ angle + (1|site_code), data = angle.transform %>% filter(site %in% c("TS","CC","SP")), family = binomial(link = "logit"))
library(tidyverse)
angle.model.2 <- glmmTMB(prop_mort ~ angle + (1|site_code), data = angle.transform %>% filter(site %in% c("TS","CC","SP")), family = binomial(link = "logit"))
angle.model.2 <- glmmTMB(prop_mort ~ angle + (1|site_code), data = angle.transform %>% filter(site_code %in% c("TS","CC","SP")), family = binomial(link = "logit"))
plot(simulateResiduals(angle.model.2))
angle.model.2 <- glmmTMB(prop_mort ~ angle, data = angle.transform %>% filter(site_code %in% c("TS","CC","SP")), family = binomial(link = "logit"))
plot(simulateResiduals(angle.model.2))
set.seed(26)
model.pred <- ggpredict(angle.model.2, terms = c("angle", "site_code"), type = "random")
library(ggeffects)
library(RColorBrewer)
set.seed(26)
model.pred <- ggpredict(angle.model.2, terms = c("angle", "site_code"), type = "random")
angle.model.2 <- glmmTMB(prop_mort ~ angle + (1|site_code), data = angle.transform %>% filter(site_code %in% c("TS","CC","SP")), family = binomial(link = "logit"))
model.pred <- ggpredict(angle.model.2, terms = c("angle", "site_code"), type = "random")
ggplot(data = solar.angles %>% rename(group = site_code), aes(x = angle, y = prop_mort*100, col = group)) + geom_point(size = 2) + labs(y = "Mortality (%)", x = "Substratum orientation (relative to direct sun = 0º)", col = "Site") + theme_classic() + scale_color_manual(values = pal) + scale_fill_manual(values = pal) + geom_line(data = model.pred, aes(x = x, y = predicted)) + theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14)) + ylim(c(0,100))
pal <- colorRampPalette(brewer.pal(6, "Dark2"))(6)
ggplot(data = solar.angles %>% rename(group = site_code), aes(x = angle, y = prop_mort*100, col = group)) + geom_point(size = 2) + labs(y = "Mortality (%)", x = "Substratum orientation (relative to direct sun = 0º)", col = "Site") + theme_classic() + scale_color_manual(values = pal) + scale_fill_manual(values = pal) + geom_line(data = model.pred, aes(x = x, y = predicted)) + theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14)) + ylim(c(0,100))
ggplot(data = solar.angles %>% rename(group = site_code), aes(x = angle, y = prop_mort, col = group)) + geom_point(size = 2) + labs(y = "Mortality (%)", x = "Substratum orientation (relative to direct sun = 0º)", col = "Site") + theme_classic() + scale_color_manual(values = pal) + scale_fill_manual(values = pal) + geom_line(data = model.pred, aes(x = x, y = predicted)) + theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14)) + ylim(c(0,100))
ggplot(data = solar.angles %>% rename(group = site_code), aes(x = angle, y = prop_mort, col = group)) + geom_point(size = 2) + labs(y = "Mortality (%)", x = "Substratum orientation (relative to direct sun = 0º)", col = "Site") + theme_classic() + scale_color_manual(values = pal) + scale_fill_manual(values = pal) + geom_line(data = model.pred, aes(x = x, y = predicted)) + theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14))
angle.model.2 <- glmmTMB(prop_mort ~ angle + (1|site_code), data = angle.transform %>% filter(site_code %in% c("TS","CC","SP", "FC")), family = binomial(link = "logit"))
plot(simulateResiduals(angle.model.2))
model.pred <- ggpredict(angle.model.2, terms = c("angle", "site_code"), type = "random")
ggplot(data = solar.angles %>% rename(group = site_code), aes(x = angle, y = prop_mort, col = group)) + geom_point(size = 2) + labs(y = "Mortality (%)", x = "Substratum orientation (relative to direct sun = 0º)", col = "Site") + theme_classic() + scale_color_manual(values = pal) + scale_fill_manual(values = pal) + geom_line(data = model.pred, aes(x = x, y = predicted)) + theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14))
