study_sites
study_sites <- ggmap(base) +
theme(panel.border = element_rect(fill = NA, colour= "black", size = 1)) +
geom_point(aes(y = latitude_degrees, x = longitude_degrees, fill = site_code), data = site_info, size = 4, alpha = 0.9, pch = 21,
color = "black") +
theme(legend.position = "none") +
labs(x = "Longitude (degrees)", y = "Latitude (degrees)")
study_sites
base <- get_map(location=c(-123.5,48.5), zoom=9, maptype = "terrain-background")
study_sites <- ggmap(base) +
theme(panel.border = element_rect(fill = NA, colour= "black", size = 1)) +
geom_point(aes(y = latitude_degrees, x = longitude_degrees, fill = site_code), data = site_info, size = 4, alpha = 0.9, pch = 21,
color = "black") +
theme(legend.position = "none") +
labs(x = "Longitude (degrees)", y = "Latitude (degrees)")
study_sites
base <- get_map(location=c(-124,48.5), zoom=9, maptype = "terrain-background")
study_sites <- ggmap(base) +
theme(panel.border = element_rect(fill = NA, colour= "black", size = 1)) +
geom_point(aes(y = latitude_degrees, x = longitude_degrees, fill = site_code), data = site_info, size = 4, alpha = 0.9, pch = 21,
color = "black") +
theme(legend.position = "none") +
labs(x = "Longitude (degrees)", y = "Latitude (degrees)")
study_sites
base <- get_map(location=c(-123.75,48.5), zoom=9, maptype = "terrain-background")
study_sites <- ggmap(base) +
theme(panel.border = element_rect(fill = NA, colour= "black", size = 1)) +
geom_point(aes(y = latitude_degrees, x = longitude_degrees, fill = site_code), data = site_info, size = 4, alpha = 0.9, pch = 21,
color = "black") +
theme(legend.position = "none") +
labs(x = "Longitude (degrees)", y = "Latitude (degrees)")
study_sites
ggsave(filename = "./outputs/sitemap.png", study_sites)
angle_sites <- read_csv("./raw_data/SBC_siteinformation.csv") %>% filter(angles == 1) %>%
select(site_code, latitude_degrees, longitude_degrees)
quartz()
study_sites <- ggmap(base) +
theme(panel.border = element_rect(fill = NA, colour= "black", size = 1)) +
geom_point(aes(y = latitude_degrees, x = longitude_degrees, fill = site_code), data = angle_sites, size = 4, alpha = 0.9, pch = 21,
color = "black") +
theme(legend.position = "none") +
labs(x = "Longitude (degrees)", y = "Latitude (degrees)")
study_sites
base <- get_map(location=c(-123,48.5), zoom=9, maptype = "terrain-background")
study_sites <- ggmap(base) +
theme(panel.border = element_rect(fill = NA, colour= "black", size = 1)) +
geom_point(aes(y = latitude_degrees, x = longitude_degrees, fill = site_code), data = angle_sites, size = 4, alpha = 0.9, pch = 21,
color = "black") +
theme(legend.position = "none") +
labs(x = "Longitude (degrees)", y = "Latitude (degrees)")
study_sites
base <- get_map(location=c(-123.25,48.7), zoom=9, maptype = "terrain-background")
study_sites <- ggmap(base) +
theme(panel.border = element_rect(fill = NA, colour= "black", size = 1)) +
geom_point(aes(y = latitude_degrees, x = longitude_degrees, fill = site_code), data = angle_sites, size = 4, alpha = 0.9, pch = 21,
color = "black") +
theme(legend.position = "none") +
labs(x = "Longitude (degrees)", y = "Latitude (degrees)")
study_sites
ggsave(filename = "./outputs/sitemap_angles.png", angle_sites)
ggsave(filename = "./outputs/sitemap_angles.png", study_sites)
infauna_sites <- read_csv("./raw_data/SBC_siteinformation.csv") %>% filter(infauna == 1) %>%
select(site_code, latitude_degrees, longitude_degrees)
base <- get_map(location=c(-123.75,48.5), zoom=9, maptype = "terrain-background")
quartz()
study_sites <- ggmap(base) +
theme(panel.border = element_rect(fill = NA, colour= "black", size = 1)) +
geom_point(aes(y = latitude_degrees, x = longitude_degrees, fill = site_code), data = infauna_sites, size = 4, alpha = 0.9, pch = 21,
color = "black") +
theme(legend.position = "none") +
labs(x = "Longitude (degrees)", y = "Latitude (degrees)")
study_sites
ggsave(filename = "./outputs/sitemap_infauna.png", study_sites)
temp.files <- list.files("./raw_data/ibutton_temp/")
temp.files <- list.files("./raw_data/ibutton_temp/")
temp.files <- list.files("../raw_data/ibutton_temp/")
png("community_shade.png", units = "in", width = 6, height = 6, res = 450)
plot(comm.infauna, type = "n")
points(comm.infauna, display = "sites", cex = 0.7, col = "black")
orditorp(comm.infauna, display="species",col="grey30", cex = 0.8, air=1)
ordiellipse(comm.infauna, groups = factors.infauna$treatment,
col = c("blue", "red"), label = TRUE)
dev.off()
dev.off()
barnacle.mort <- read_csv("./raw_data/shade/SBC_SHADE_semibalanusmort.csv")
barnacle.mort <- read_csv("../raw_data/shade/SBC_SHADE_semibalanusmort.csv")
```{r, message = F, results = "hide"}
barnacle.mort <- read_csv("../raw_data/shade/SBC_SHADE_semibalanusmort.csv")
barnacle.mort <- read_csv("../raw_data/shade/SBC_SHADE_semibalanusmort.csv") %>% mutate(prop_mort = (number_dead)/(number_live+number_dead) %>% filter(prop_mort != "NaN"))
barnacle.mort <- read_csv("../raw_data/shade/SBC_SHADE_semibalanusmort.csv") %>% mutate(prop_mort = (number_dead)/(number_live+number_dead)) %>% filter(prop_mort != "NaN"))
barnacle.mort <- read_csv("../raw_data/shade/SBC_SHADE_semibalanusmort.csv") %>% mutate(prop_mort = (number_dead)/(number_live+number_dead)) %>% filter(prop_mort != "NaN")
plot.info <- read_csv("../raw_data/shade/SBC_SHADE_plot_info.csv")
mort.complete <- barnacle.mort %>% left_join(plot.info) %>% select(prop_mort, treatment_original_numeric) %>% mutate(treatment = case_when(treatment == 1 ~ "UI", treatment == 2 ~ "SI", treatment == 3 ~ "UR", treatment == 4 ~ "SR"))
mort.complete <- barnacle.mort %>% left_join(plot.info) %>% select(prop_mort, treatment_original_numeric) %>% rename(treatment = treatment_original_numeric) %>% mutate(treatment = case_when(treatment == 1 ~ "UI", treatment == 2 ~ "SI", treatment == 3 ~ "UR", treatment == 4 ~ "SR"))
View(mort.complete)
mort.beds <- mort.complete %>% filter(treatment %in% c("SI","UI"))
shade.mort.model <- lm(prop.mort ~ treatment, data = mort.beds)
shade.mort.model <- lm(prop_mort ~ treatment, data = mort.beds)
plot(shade.mort.model)
summary(shade.mort.model)
Anova(shade.mort.model)
summary(shade.mort.model)
ggplot(mort.beds, aes(x = treatment, y = prop_mort)) + geom_boxplot()
mort.complete <- barnacle.mort %>% left_join(plot.info) %>% fitler(plot_number %in% -c(15,35,36,40))
mort.complete <- barnacle.mort %>% left_join(plot.info) %>% filter(plot_number %in% -c(15,35,36,40))
mort.complete <- barnacle.mort %>% left_join(plot.info) %>% filter(plot_number %in% -c(15,35,36,40)) %>% select(prop_mort, treatment_original_numeric) %>% rename(treatment = treatment_original_numeric) %>% mutate(treatment = case_when(treatment == 1 ~ "UI", treatment == 2 ~ "SI", treatment == 3 ~ "UR", treatment == 4 ~ "SR"))
mort.beds <- mort.complete %>% filter(treatment %in% c("SI","UI"))
shade.mort.model <- lm(prop_mort ~ treatment, data = mort.beds)
mort.complete <- barnacle.mort %>% left_join(plot.info) %>% filter((plot_number %in% c(15,35,36,40)) == F) %>% select(prop_mort, treatment_original_numeric) %>% rename(treatment = treatment_original_numeric) %>% mutate(treatment = case_when(treatment == 1 ~ "UI", treatment == 2 ~ "SI", treatment == 3 ~ "UR", treatment == 4 ~ "SR"))
mort.beds <- mort.complete %>% filter(treatment %in% c("SI","UI"))
shade.mort.model <- lm(prop_mort ~ treatment, data = mort.beds)
summary(shade.mort.model)
ggplot(mort.beds, aes(x = treatment, y = prop_mort)) + geom_boxplot()
mort.complete <- barnacle.mort %>% left_join(plot.info) %>% filter((plot_number %in% c(15,35,36,40)) == F) %>% select(prop_mort, treatment_original_numeric, plot_number) %>% rename(treatment = treatment_original_numeric) %>% mutate(treatment = case_when(treatment == 1 ~ "UI", treatment == 2 ~ "SI", treatment == 3 ~ "UR", treatment == 4 ~ "SR"))
mort.beds <- mort.complete %>% filter(treatment %in% c("SI","UI"))
visuals <- read_csv("../raw_data/shade/SBC_shade_visual_3_202108.csv")
visuals <- read_csv("../raw_data/shade/SBC_shade_visual_3_202108.csv")
visuals <- read_csv("../raw_data/shade/SBC_shade_visual_3_202108.csv")
H <- diversity(visuals)
richness <- specnumber(visuals)
abund <- rowSums(visuals %>% select(-plot_number))
visuals <- read_csv("../raw_data/shade/SBC_SHADE_visual_3_202108.csv")
H <- diversity(visuals)
abund <- rowSums(visuals %>% select(-plot_number))
taxa <- read_csv("../raw_data/shade/SBC_SHADE_taxonomic_20211004.csv")
View(taxa)
taxa <- read_csv("../raw_data/shade/SBC_SHADE_taxonomic_20211004.csv") %>% select(taxon_code, kingdom)
algae <- taxa %>% filter(kingdom != "Animalia")
algae <- taxa %>% filter(kingdom != "Animalia") %>% select(-kingdom)
algae <- as.vector(algae)
algae
print(algae)
animal <- taxa %>% filter(kingdom == "Animalia") %>% select(-kingdom)
?pivot_longer
visuals.long <- visuals %>% pivot_longer(cols = c(2:length(visuals)), names_to = "taxon_code", values_to = "abund")
visuals.algae <- visuals.long %>% anti_join(algae)
visuals.algae <- visuals.long %>% right_join(algae)
visuals.animals <- visuals.long %>% right_join(animals)
visuals.animals <- visuals.long %>% right_join(animal)
visuals.algae <- visuals.long %>% right_join(algae) %>% pivot_wider(names_from = "taxon_code", values_from = "abund")
View(visuals.algae)
View(algae)
visuals.algae <- visuals.long %>% right_join(algae) %>% pivot_wider(names_from = "taxon_code", values_from = "abund") %>% select(-ULSP) %>% na.omit()
visuals.animals <- visuals.long %>% right_join(animal) %>% pivot_wider(names_from = "taxon_code", values_from = "abund")
View(visuals.animals)
View(visuals.long)
View(visuals)
View(visuals.algae)
View(animal)
taxa <- read_csv("../raw_data/shade/SBC_SHADE_taxonomic_20211004.csv") %>% select(taxon_code, kingdom)
animal <- taxa %>% filter(kingdom == "Animalia") %>% select(-kingdom)
visuals.long <- visuals %>% pivot_longer(cols = c(2:length(visuals)), names_to = "taxon_code", values_to = "abund")
visuals.animals <- visuals.long %>% right_join(animal) %>% pivot_wider(names_from = "taxon_code", values_from = "abund")
visuals.animals <- visuals.long %>% right_join(animal) %>% pivot_wider(names_from = "taxon_code", values_from = "abund") %>% select(-GNOR:KATU) %>% na.omit()
visuals.animals <- visuals.long %>% right_join(animal) %>% pivot_wider(names_from = "taxon_code", values_from = "abund") %>% select(-c(GNOR:KATU)) %>% na.omit()
visuals.animals <- visuals.long %>% right_join(animal) %>% pivot_wider(names_from = "taxon_code", values_from = "abund") %>% select(-c(GNOR:KATU))
visuals.animals <- visuals.long %>% right_join(animal) %>% pivot_wider(names_from = "taxon_code", values_from = "abund") %>% select(-c(PHAG:KATU))
visuals.animals <- visuals.long %>% right_join(animal) %>% pivot_wider(names_from = "taxon_code", values_from = "abund") %>% select(-c(GNOR:LERU))
visuals.animals <- visuals.long %>% right_join(animal) %>% pivot_wider(names_from = "taxon_code", values_from = "abund") %>% select(-c(GNOR:NEVE))
visuals.animals <- visuals.long %>% right_join(animal) %>% pivot_wider(names_from = "taxon_code", values_from = "abund") %>% select(-c(GNOR:NEVE)) %>% na.omit()
H <- diversity(visuals.animals)
richness <- specnumber(visuals.animal)
richness <- specnumber(visuals.animals)
abund <- rowSums(visuals.animals %>% select(-plot_number))
diversity.animals <- cbind(visuals.animals$plot_number, H, richness, abund)
diversity.animals <- cbind(visuals.animals$plot_number, H, richness, abund) %>% full_join(plot.info) %>% select(-plot_number, -treatment_final_numeric) %>% rename(treatment = treatment_original_numeric) %>% mutate(treatment = case_when(treatment == 1 ~ "UI", treatment == 2 ~ "SI", treatment == 3 ~ "UR", treatment == 4 ~ "SR"))
View(plot.info)
View(diversity.animals)
colnames(diversity.animals = c("plot_number","H","richness","abund"))
colnames(diversity.animals) <- c("plot_number","H","richness","abund")
diversity.animals.trts <- diversity.animals %>% full_join(plot.info) %>% select(-plot_number, -treatment_final_numeric) %>% rename(treatment = treatment_original_numeric) %>% mutate(treatment = case_when(treatment == 1 ~ "UI", treatment == 2 ~ "SI", treatment == 3 ~ "UR", treatment == 4 ~ "SR"))
diversity.animals <- as.data.frame(diversity.animals)
diversity.animals.trts <- diversity.animals %>% full_join(plot.info) %>% select(-plot_number, -treatment_final_numeric) %>% rename(treatment = treatment_original_numeric) %>% mutate(treatment = case_when(treatment == 1 ~ "UI", treatment == 2 ~ "SI", treatment == 3 ~ "UR", treatment == 4 ~ "SR"))
View(diversity.animals.trts)
diversity.animals.trts <- diversity.animals %>% full_join(plot.info) %>% select(-plot_number, -treatment_final_numeric, -shore_level) %>% rename(treatment = treatment_original_numeric) %>% mutate(treatment = case_when(treatment == 1 ~ "UI", treatment == 2 ~ "SI", treatment == 3 ~ "UR", treatment == 4 ~ "SR"))
richness <- specnumber(visuals.algae)
H <- diversity(visuals.algae)
total_cover <- rowSums(visuals.algae %>% select(-plot_number))
colnames(diversity.algae) <- c("plot_number","H","richness", "total_cover")
diversity.algae <- cbind(visuals.algae$plot_number, H, richness, total_cover)
colnames(diversity.algae) <- c("plot_number","H","richness", "total_cover")
diversity.algae <- as.data.frame(diversity.algae)
diversity.algae.trts <- diversity.algae %>% full_join(plot.info) %>% select(-plot_number, -treatment_final_numeric, -shore_level) %>% rename(treatment = treatment_original_numeric) %>% mutate(treatment = case_when(treatment == 1 ~ "UI", treatment == 2 ~ "SI", treatment == 3 ~ "UR", treatment == 4 ~ "SR"))
ggplot(diversity.animals.trts, aes(x=treatment, y = richness)) + geom_point()
ggplot(diversity.animals.trts, aes(x=treatment, y = richness)) + geom_boxplot()
ggplot(diversity.animals.trts, aes(x=treatment, y = H)) + geom_boxplot()
ggplot(diversity.animals.trts, aes(x=treatment, y = abund)) + geom_boxplot()
animal.richness <- lm(richness ~ treatment, data = diversity.animals.trts)
summary(animal.richness)
animal.richness <- lmer(richness ~ treatment + (1|block), data = diversity.animals.trts)
animal.diversity <- lm(H ~ treatment, data = diversity.animals.trts)
summary(animal.diversity)
anova(animal.richness)
animal.richness <- lm(richness ~ treatment, data = diversity.animals.trts)
summary(animal.richness)
anova(animal.richness)
Anova(animal.richness)
Anova(animal.diversity)
ggplot(diversity.algae.trts, aes(x=treatment, y = H)) + geom_boxplot()
ggplot(diversity.algae.trts, aes(x=treatment, y = richness)) + geom_boxplot()
ggplot(diversity.algae.trts, aes(x=treatment, y = total_cover)) + geom_boxplot()
knitr::opts_chunk$set(echo = TRUE)
ggplot(data = mort.summary, aes(x = fct_reorder(site_code, longitude_degrees, min), y = average_mort, col = average_maxtemp)) + geom_point(size = 3) + scale_colour_gradientn(colours = wes_palette("Zissou1", type = "continuous", 10)) +theme_classic() +labs(y = "Proportion mortality", x = "Site", color = "Mean max daily temp \n during heat wave") + theme(axis.label = element_text(size = 14))
library(tidyverse)
ggplot(data = mort.summary, aes(x = fct_reorder(site_code, longitude_degrees, min), y = average_mort, col = average_maxtemp)) + geom_point(size = 3) + scale_colour_gradientn(colours = wes_palette("Zissou1", type = "continuous", 10)) +theme_classic() +labs(y = "Proportion mortality", x = "Site", color = "Mean max daily temp \n during heat wave") + theme(axis.label = element_text(size = 14))
library(wesanderson)
ggplot(data = mort.summary, aes(x = fct_reorder(site_code, longitude_degrees, min), y = average_mort, col = average_maxtemp)) + geom_point(size = 3) + scale_colour_gradientn(colours = wes_palette("Zissou1", type = "continuous", 10)) +theme_classic() +labs(y = "Proportion mortality", x = "Site", color = "Mean max daily temp \n during heat wave") + theme(axis.label = element_text(size = 14))
ggplot(data = mort.summary, aes(x = fct_reorder(site_code, longitude_degrees, min), y = average_mort, col = average_maxtemp)) + geom_point(size = 3) + scale_colour_gradientn(colours = wes_palette("Zissou1", type = "continuous", 10)) +theme_classic() +labs(y = "Proportion mortality", x = "Site", color = "Mean max daily temp \n during heat wave") + theme(axis.title = element_text(size = 14))
ggplot(data = mort.summary, aes(x = fct_reorder(site_code, longitude_degrees, min), y = average_mort, col = average_maxtemp)) + geom_point(size = 3) + scale_colour_gradientn(colours = wes_palette("Zissou1", type = "continuous", 10)) +theme_classic() +labs(y = "Proportion mortality", x = "Site", color = "Mean max daily temp \n during heat wave") + theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14))
ggplot(data = mort.summary, aes(x = fct_reorder(site_code, longitude_degrees, min), y = average_mort, col = average_maxtemp)) + geom_point(size = 3, col = "black") + scale_colour_gradientn(colours = wes_palette("Zissou1", type = "continuous", 10)) +theme_classic() +labs(y = "Proportion mortality", x = "Site", color = "Mean max daily temp \n during heat wave") + theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14))
ggplot(data = mort.summary, aes(x = fct_reorder(site_code, longitude_degrees, min), y = average_mort, col = average_maxtemp)) + geom_point(size = 3, pch = 3) + scale_colour_gradientn(colours = wes_palette("Zissou1", type = "continuous", 10)) +theme_classic() +labs(y = "Proportion mortality", x = "Site", color = "Mean max daily temp \n during heat wave") + theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14))
ggplot(data = mort.summary, aes(x = fct_reorder(site_code, longitude_degrees, min), y = average_mort, col = average_maxtemp)) + geom_point(size = 3, pch = 2) + scale_colour_gradientn(colours = wes_palette("Zissou1", type = "continuous", 10)) +theme_classic() +labs(y = "Proportion mortality", x = "Site", color = "Mean max daily temp \n during heat wave") + theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14))
ggplot(data = mort.summary, aes(x = fct_reorder(site_code, longitude_degrees, min), y = average_mort, col = average_maxtemp)) + geom_point(size = 3, pch = 1) + scale_colour_gradientn(colours = wes_palette("Zissou1", type = "continuous", 10)) +theme_classic() +labs(y = "Proportion mortality", x = "Site", color = "Mean max daily temp \n during heat wave") + theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14))
ggplot(data = mort.summary, aes(x = fct_reorder(site_code, longitude_degrees, min), y = average_mort, fill = average_maxtemp)) + geom_point(size = 3, pch = 1) + scale_fill_gradientn(colours = wes_palette("Zissou1", type = "continuous", 10)) +theme_classic() +labs(y = "Proportion mortality", x = "Site", color = "Mean max daily temp \n during heat wave") + theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14))
ggplot(data = mort.summary, aes(x = fct_reorder(site_code, longitude_degrees, min), y = average_mort, fill = average_maxtemp)) + geom_point(size = 3, pch = 1) + scale_fill_gradientn(fill = wes_palette("Zissou1", type = "continuous", 10)) +theme_classic() +labs(y = "Proportion mortality", x = "Site", color = "Mean max daily temp \n during heat wave") + theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14))
ggplot(data = mort.summary, aes(x = fct_reorder(site_code, longitude_degrees, min), y = average_mort, fill = average_maxtemp)) + geom_point(size = 3, pch = 1) + scale_fill_gradientn(colours = wes_palette("Zissou1", type = "continuous")) +theme_classic() +labs(y = "Proportion mortality", x = "Site", color = "Mean max daily temp \n during heat wave") + theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14))
ggplot(data = mort.summary, aes(x = fct_reorder(site_code, longitude_degrees, min), y = average_mort, col = average_maxtemp)) + geom_point(size = 3) + scale_colour_gradientn(colours = wes_palette("Zissou1", type = "continuous", 10)) + geom_point(size = 3, pch = 1, color = "black"), theme_classic() +labs(y = "Proportion mortality", x = "Site", color = "Mean max daily temp \n during heat wave") + theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14))
ggplot(data = mort.summary, aes(x = fct_reorder(site_code, longitude_degrees, min), y = average_mort, col = average_maxtemp)) + geom_point(size = 3) + scale_colour_gradientn(colours = wes_palette("Zissou1", type = "continuous", 10)) + geom_point(size = 3, pch = 1, color = "black") + theme_classic() +labs(y = "Proportion mortality", x = "Site", color = "Mean max daily temp \n during heat wave") + theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14))
ggplot(data = mort.summary, aes(x = fct_reorder(site_code, longitude_degrees, min), y = average_mort, col = average_maxtemp)) + geom_point(size = 3) + scale_colour_gradientn(colours = wes_palette("Zissou1", type = "continuous", 10)) + geom_point(size = 3, pch = 1, color = "black") + theme_bw() +labs(y = "Proportion mortality", x = "Site", color = "Mean max daily temp \n during heat wave") + theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14))
ggplot(data = solar.angles, aes(x = angle, y = prop_mort, col = site_code)) + geom_point() + labs(y = "Proportion mortality", x = "Solar angle (degrees)", col = "site") + theme_classic() + geom_smooth(method = "lm", se=F) + theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14))
ggplot(data = temp.summary, aes(x = date, y = mean_temp, col = treatment)) + geom_line() + scale_color_manual(values = c("skyblue4","skyblue2", "tomato4", "tomato2")) + labs(x = "Date", y = "Temperature (ºC)", color = "Treatment") + theme_bw + theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14))
ggplot(data = temp.summary, aes(x = date, y = mean_temp, col = treatment)) + geom_line() + scale_color_manual(values = c("skyblue4","skyblue2", "tomato4", "tomato2")) + labs(x = "Date", y = "Temperature (ºC)", color = "Treatment") + theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14))
ggplot(data = temp.summary, aes(x = date, y = mean_temp, col = treatment)) + geom_line() + scale_color_manual(values = c("skyblue4","skyblue2", "tomato4", "tomato2")) + labs(x = "Date", y = "Temperature (ºC)", color = "Treatment") + theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14)) + theme_bw()
ggplot(data = temp.summary2 %>% filter(mdmax_temp < 50), aes(x = treatment, y = mdmax_temp, col = treatment)) + geom_boxplot() + scale_color_manual(values = c("skyblue4","skyblue2", "tomato4", "tomato2")) + labs(x = "Date", y = "Maximum Daily Temperature (ºC)", color = "Treatment") +  theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14)) + theme_bw()
ggplot(mort.beds, aes(x = treatment, y = prop_mort, col = treatment)) + geom_boxplot() +  theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14)) + theme_bw() + scale_color_discrete(values = c("skyblue4", "tomato4"))
ggplot(mort.beds, aes(x = treatment, y = prop_mort, col = treatment)) + geom_boxplot() +  theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14)) + theme_bw() + scale_color_discrete(colors = c("skyblue4", "tomato4"))
ggplot(mort.beds, aes(x = treatment, y = prop_mort, col = treatment)) + geom_boxplot() +  theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14)) + theme_bw() + scale_color_manual( values = c("skyblue4", "tomato4"))
View(mort.beds)
View(plot.info)
View(plot.info)
barnacle.mort <- read_csv("../raw_data/shade/SBC_SHADE_semibalanusmort.csv") %>% mutate(prop_mort = (number_dead)/(number_live+number_dead)) %>% filter(prop_mort != "NaN")
plot.info <- read_csv("../raw_data/shade/SBC_SHADE_plot_info.csv")
mort.complete <- barnacle.mort %>% left_join(plot.info) %>% filter((plot_number %in% c(15,35,36,40)) == F) %>% select(prop_mort, treatment_original_numeric, plot_number) %>% rename(treatment = treatment_original_numeric) %>% mutate(treatment = case_when(treatment == 1 ~ "UI", treatment == 2 ~ "SI", treatment == 3 ~ "UR", treatment == 4 ~ "SR"))
mort.beds <- mort.complete %>% filter(treatment %in% c("SI","UI"))
shade.mort.model <- lm(prop_mort ~ treatment, data = mort.beds)
summary(shade.mort.model)
ggplot(mort.beds, aes(x = treatment, y = prop_mort, col = treatment)) + geom_boxplot() +  theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14)) + theme_bw() + scale_color_manual( values = c("skyblue4", "tomato4"))
richness.all.taxa <- richness(visuals)
library(vegan)
richness.all.taxa <- specnumber(visuals)
richness.all.taxa <- cbind(visuals$plot_number, specnumber(visuals))
colnames(richness.all.taxa) <- c("plot_number", "richness")
richness.all.trts <- richness.all.taxa %>% full_join(plot.info) %>% select(-plot_number, -treatment_final_numeric, -shore_level) %>% rename(treatment = treatment_original_numeric) %>% mutate(treatment = case_when(treatment == 1 ~ "UI", treatment == 2 ~ "SI", treatment == 3 ~ "UR", treatment == 4 ~ "SR"))
richness.all.taxa <- as.data.frame(richness.all.taxa)
richness.all.trts <- richness.all.taxa %>% full_join(plot.info) %>% select(-plot_number, -treatment_final_numeric, -shore_level) %>% rename(treatment = treatment_original_numeric) %>% mutate(treatment = case_when(treatment == 1 ~ "UI", treatment == 2 ~ "SI", treatment == 3 ~ "UR", treatment == 4 ~ "SR"))
ggplot(richness.all.trts, aes(x=treatment, y = richness)) + geom_boxplot()
ggplot(richness.all.trts, aes(x=treatment, y = richness)) + geom_boxplot() + labs(y = "Species richness", x = "Treatment") + scale_color_manual(values = c("skyblue4","skyblue2", "tomato4", "tomato2")) +  theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14)) + theme_bw()
ggplot(richness.all.trts, aes(x=treatment, y = richness, color = treatment)) + geom_boxplot() + labs(y = "Species richness", x = "Treatment") + scale_color_manual(values = c("skyblue4","skyblue2", "tomato4", "tomato2")) +  theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14)) + theme_bw()
ggplot(diversity.animals.trts, aes(x=treatment, y = H, color = treatment)) + geom_boxplot() + scale_color_manual(values = c("skyblue4","skyblue2", "tomato4", "tomato2")) +  theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14)) + theme_bw()
ggplot(diversity.animals.trts, aes(x=treatment, y = abund, color = treatment)) + geom_boxplot() + scale_color_manual(values = c("skyblue4","skyblue2", "tomato4", "tomato2")) +  theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14)) + theme_bw()
summary(animal.richness)
richness <- lm(richness ~ treatment, data = richness.all.trts)
summary(richness)
Anova(richness)
library(car)
Anova(richness)
animal.abundance <- lm(abund ~ treatment, data = diversity.animals.trts)
summary(animal.abundance)
Anova(animal.abundance)
ggplot(diversity.algae.trts, aes(x=treatment, y = H)) + geom_boxplot() + scale_color_manual(values = c("skyblue4","skyblue2", "tomato4", "tomato2")) +  theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14)) + theme_bw()
ggplot(diversity.algae.trts, aes(x=treatment, y = H, color = treatment)) + geom_boxplot() + scale_color_manual(values = c("skyblue4","skyblue2", "tomato4", "tomato2")) +  theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14)) + theme_bw()
ggplot(diversity.algae.trts, aes(x=treatment, y = total_cover, color = treatment)) + geom_boxplot() + scale_color_manual(values = c("skyblue4","skyblue2", "tomato4", "tomato2")) +  theme(axis.title = element_text(size = 14), axis.text = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 14)) + theme_bw()
algal.diversity <- lm(H ~ treatment, data = diversity.algae.trts)
summary(algal.diversity)
Anova(algal.diversity)
summary(algal.diversity)
algal.cover <- lm(total_cover ~ treatment, data = diversity.algae.trts)
summary(algal.cover)
Anova(algal.cover)
comm.visual <- visuals %>% select(-plot_number)
plot(comm.visual, type = "n")
comm.visual.matrix <- as.marix(comm.visual)
comm.visual.matrix <- as.matrix(comm.visual)
comm.visual.shade <- metaMDS(comm.visual.matrix, k = 2, try = 400)
```{r, results ="hide",message=F}
plot(comm.visual.shade, type = "n")
points(comm.visual.shade, display = "sites", cex = 0.7, col = "black")
orditorp(comm.visual.shade, display="species",col="grey30", cex = 0.8, air=1)
View(visuals)
ordiellipse(comm.visual.shade, groups = plot.info$treatment_original_numeric,
col = c("skyblue4", "skyblue2","tomato4","tomato2"), label = TRUE)
ordiellipse(comm.visual.shade, groups = plot.info$treatment_original_numeric,
col = c("tomato4", "skyblue4","tomato2","skyblue2"), label = TRUE)
png("community_visual_shade.png", units = "in", width = 6, height = 6, res = 450)
plot(comm.visual.shade, type = "n")
points(comm.visual.shade, display = "sites", cex = 0.7, col = "black")
orditorp(comm.visual.shade, display="species",col="grey30", cex = 0.8, air=1)
ordiellipse(comm.visual.shade, groups = plot.info$treatment_original_numeric,
col = c("tomato4", "skyblue4","tomato2","skyblue2"), label = TRUE)
dev.off()
png("community_visual_shade.png", units = "in", width = 6, height = 6, res = 450)
plot(comm.visual.shade, type = "n")
dev.off()
dev.off()
png("community_visual_shade.png", units = "in", width = 6, height = 6, res = 450)
plot(comm.visual.shade, type = "n")
points(comm.visual.shade, display = "sites", cex = 0.7, col = "black")
orditorp(comm.visual.shade, display="species",col="grey30", cex = 0.8, air=1)
ordiellipse(comm.visual.shade, groups = plot.info$treatment_original_numeric,
col = c("tomato4", "skyblue4","tomato2","skyblue2"), label = TRUE)
png("community_visual_shade.png", units = "in", width = 6, height = 6, res = 450)
plot(comm.visual.shade, type = "n")
####
quartz()
png("community_visual_shade.png", units = "in", width = 6, height = 6, res = 450)
plot(comm.visual.shade, type = "n")
points(comm.visual.shade, display = "sites", cex = 0.7, col = "black")
orditorp(comm.visual.shade, display="species",col="grey30", cex = 0.8, air=1)
ordiellipse(comm.visual.shade, groups = plot.info$treatment_original_numeric,
col = c("tomato4", "skyblue4","tomato2","skyblue2"), label = TRUE)
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
png("community_visual_shade.png", units = "in", width = 6, height = 6, res = 450)
plot(comm.visual.shade, type = "n")
dev.off()
png("community_visual_shade.png", units = "in", width = 6, height = 6, res = 450)
plot(comm.visual.shade, type = "n")
points(comm.visual.shade, display = "sites", cex = 0.7, col = "black")
orditorp(comm.visual.shade, display="species",col="grey30", cex = 0.8, air=1)
ordiellipse(comm.visual.shade, groups = plot.info$treatment_original_numeric,
col = c("tomato4", "skyblue4","tomato2","skyblue2"), label = TRUE)
dev.off()
treatments.codes <- case_when(plot.info$treament_original_numeric == 1 ~ "UI",
plot.info$treatment_original_numeric == 2 ~ "SI",
plot.info$treatment_original_numeric == 3 ~ "UR",
plot.info$treatment_original_numeric -- 4 ~ "SR")
treatments.codes <- as.data.frame(plot.info$treatment_original_numeric)
treatments.codes <- as.data.frame(plot.info$treatment_original_numeric) %>% case_when(plot.info$treament_original_numeric == 1 ~ "UI",
plot.info$treatment_original_numeric == 2 ~ "SI",
plot.info$treatment_original_numeric == 3 ~ "UR",
plot.info$treatment_original_numeric -- 4 ~ "SR")
View(treatments.codes)
case_when(treatment_number == 1 ~ "UI",
treatments.codes <- as.data.frame(plot.info$treatment_original_numeric) %>%
rename(treatment_number = 1) %>% mutate(treatment_code =
case_when(treatment_number == 1 ~ "UI",
treatment_number == 2 ~ "SI",
treatment_number == 3 ~ "UR",
treatment_number -- 4 ~ "SR"))
treatments.codes <- as.data.frame(plot.info$treatment_original_numeric) %>%
rename(treatment_number = 1) %>% mutate(treatment_code =
case_when(treatment_number == 1 ~ "UI",
treatment_number == 2 ~ "SI",
treatment_number == 3 ~ "UR",
treatment_number -- 4 ~ "SR"))
treatments.codes <- as.data.frame(plot.info$treatment_original_numeric) %>%
rename(treatment_number = 1) %>% mutate(treatment_code =
case_when(treatment_number == 1 ~ "UI",
treatment_number == 2 ~ "SI",
treatment_number == 3 ~ "UR",
treatment_number == 4 ~ "SR"))
ordiellipse(comm.visual.shade, groups = treatment.codes$treatment_code,
col = c("tomato4", "skyblue4","tomato2","skyblue2"), label = TRUE)
png("community_visual_shade.png", units = "in", width = 6, height = 6, res = 450)
plot(comm.visual.shade, type = "n")
points(comm.visual.shade, display = "sites", cex = 0.7, col = "black")
orditorp(comm.visual.shade, display="species",col="grey30", cex = 0.8, air=1)
ordiellipse(comm.visual.shade, groups = treatments.codes$treatment_code,
col = c("tomato4", "skyblue4","tomato2","skyblue2"), label = TRUE)
dev.off()
perm.y1 <- adonis(comm.visual.matrix ~ treatment_code, data = treatments.codes,
perm = 99)
perm.y1
dist.y1 <- vegdist(comm.visual.matrix, method = "bray")
disp.y1 <- betadisper(dist.y1, type = "centroid", group = comm_oct_factors$treatment)
disp.y1 <- betadisper(dist.y1, type = "centroid", group = treatments.codes$treatment_code)
anova(disp.y1)
boxplot(disp.y1)
boxplot(disp.y1, y = "Treatment")
boxplot(disp.y1, x = "Treatment")
boxplot(disp.y1, x = "Treatment")
anova(disp.y1)
boxplot(disp.y1, x = "Treatment")
boxplot(disp.y1, y = "Treatment")
boxplot(disp.y1, x = "Treatment")
boxplot(disp.y1, xlab = "Treatment")
perm.y1
dev.off()
# orientation_rad = compass angle relative to north = 0, in radians
# solar_azimuth_rad = solar azimuth for relevant location + time, in radians
# sigma = angle of substratum relative to horizontal (0 angle), in radians
# beta = solar elevation for relevant location + time, in radians
solar_angle_degrees <- function(orientation_rad, solar_azimuth_rad, sigma, beta){
solar_angle = ((acos(sin(beta)*cos(sigma) + cos(abs(orientation_rad - solar_azimuth_rad))*cos(beta)*sin(sigma)))/(2*pi))*360
}
View(angle.correct)
# the compass orientation needs to be flipped by 180 degrees/pi radians
# the angle needs to be converted from angle from vertical to angle from horizontal
angle.correct <- angle.calculate %>% mutate(orientation_rad = (((orientation_raw_degrees/360)*2*pi)-pi), prop_mort = number_dead/(number_live + number_dead), sigma = ((90-angle_raw_degrees)/360)*2*pi, beta = (solar_elevation/360)*2*pi, solar_azimuth_rad = (solar_azimuth/360)*2*pi)
library(tidyverse)
# the compass orientation needs to be flipped by 180 degrees/pi radians
# the angle needs to be converted from angle from vertical to angle from horizontal
angle.correct <- angle.calculate %>% mutate(orientation_rad = (((orientation_raw_degrees/360)*2*pi)-pi), prop_mort = number_dead/(number_live + number_dead), sigma = ((90-angle_raw_degrees)/360)*2*pi, beta = (solar_elevation/360)*2*pi, solar_azimuth_rad = (solar_azimuth/360)*2*pi)
# orientation_rad = compass angle relative to north = 0, in radians
# solar_azimuth_rad = solar azimuth for relevant location + time, in radians
# sigma = angle of substratum relative to horizontal (0 angle), in radians
# beta = solar elevation for relevant location + time, in radians
solar_angle_degrees <- function(df){
solar_angle = ((acos(sin(df$beta)*cos(df$sigma) + cos(abs(df$orientation_rad - df$solar_azimuth_rad))*cos(df$beta)*sin(df$sigma)))/(2*pi))*360
}
test <- solar_angle_degrees(angle.correct)
View(test)
View(as.data.frame(test))
# orientation_rad = compass angle relative to north = 0, in radians
# solar_azimuth_rad = solar azimuth for relevant location + time, in radians
# sigma = angle of substratum relative to horizontal (0 angle), in radians
# beta = solar elevation for relevant location + time, in radians
solar_angle_degrees <- function(df){
df$solar_angle_degrees = ((acos(sin(df$beta)*cos(df$sigma) + cos(abs(df$orientation_rad - df$solar_azimuth_rad))*cos(df$beta)*sin(df$sigma)))/(2*pi))*360
}
test <- solar_angle_degrees(angle.correct)
solar_angle_degrees(angle.correct)
df$solar_angle_degrees <- solar_angle_degrees
# orientation_rad = compass angle relative to north = 0, in radians
# solar_azimuth_rad = solar azimuth for relevant location + time, in radians
# sigma = angle of substratum relative to horizontal (0 angle), in radians
# beta = solar elevation for relevant location + time, in radians
solar_angle_degrees <- function(df){
solar_angle_degrees = ((acos(sin(df$beta)*cos(df$sigma) + cos(abs(df$orientation_rad - df$solar_azimuth_rad))*cos(df$beta)*sin(df$sigma)))/(2*pi))*360
df$solar_angle_degrees <- solar_angle_degrees
}
solar_angle_degrees(angle.correct)
View(angle.correct)
df <- cbind(df,solar_angle_degrees)
# orientation_rad = compass angle relative to north = 0, in radians
# solar_azimuth_rad = solar azimuth for relevant location + time, in radians
# sigma = angle of substratum relative to horizontal (0 angle), in radians
# beta = solar elevation for relevant location + time, in radians
solar_angle_degrees <- function(df){
solar_angle_degrees = ((acos(sin(df$beta)*cos(df$sigma) + cos(abs(df$orientation_rad - df$solar_azimuth_rad))*cos(df$beta)*sin(df$sigma)))/(2*pi))*360
df <- cbind(df,solar_angle_degrees)
}
solar_angle_degrees(angle.correct)
View(angle.correct)
# orientation_rad = compass angle relative to north = 0, in radians
# solar_azimuth_rad = solar azimuth for relevant location + time, in radians
# sigma = angle of substratum relative to horizontal (0 angle), in radians
# beta = solar elevation for relevant location + time, in radians
solar_angle_degrees <- function(df){
solar_angle = ((acos(sin(df$beta)*cos(df$sigma) + cos(abs(df$orientation_rad - df$solar_azimuth_rad))*cos(df$beta)*sin(df$sigma)))/(2*pi))*360
df <- cbind(df,solar_angle)
}
solar_angle_degrees(angle.correct)
# orientation_rad = compass angle relative to north = 0, in radians
# solar_azimuth_rad = solar azimuth for relevant location + time, in radians
# sigma = angle of substratum relative to horizontal (0 angle), in radians
# beta = solar elevation for relevant location + time, in radians
solar_angle_degrees <- function(df){
solar_angle = ((acos(sin(df$beta)*cos(df$sigma) + cos(abs(df$orientation_rad - df$solar_azimuth_rad))*cos(df$beta)*sin(df$sigma)))/(2*pi))*360
output <- cbind(df,solar_angle)
}
solar_angle_degrees(angle.correct)
# orientation_rad = compass angle relative to north = 0, in radians
# solar_azimuth_rad = solar azimuth for relevant location + time, in radians
# sigma = angle of substratum relative to horizontal (0 angle), in radians
# beta = solar elevation for relevant location + time, in radians
solar_angle_degrees <- function(df){
solar_angle = ((acos(sin(df$beta)*cos(df$sigma) + cos(abs(df$orientation_rad - df$solar_azimuth_rad))*cos(df$beta)*sin(df$sigma)))/(2*pi))*360
cbind(df,solar_angle)
}
solar_angle_degrees(angle.correct)
# orientation_rad = compass angle relative to north = 0, in radians
# solar_azimuth_rad = solar azimuth for relevant location + time, in radians
# sigma = angle of substratum relative to horizontal (0 angle), in radians
# beta = solar elevation for relevant location + time, in radians
solar_angle_degrees <- function(df){
solar_angle_degrees = as.data.frame(((acos(sin(df$beta)*cos(df$sigma) + cos(abs(df$orientation_rad - df$solar_azimuth_rad))*cos(df$beta)*sin(df$sigma)))/(2*pi))*360)
print(cbind(df,solar_angle))
}
solar_angle_degrees(angle.correct)
# orientation_rad = compass angle relative to north = 0, in radians
# solar_azimuth_rad = solar azimuth for relevant location + time, in radians
# sigma = angle of substratum relative to horizontal (0 angle), in radians
# beta = solar elevation for relevant location + time, in radians
solar_angle_degrees <- function(df){
solar_angle_degrees = as.data.frame(((acos(sin(df$beta)*cos(df$sigma) + cos(abs(df$orientation_rad - df$solar_azimuth_rad))*cos(df$beta)*sin(df$sigma)))/(2*pi))*360)
print(cbind(df,solar_angle_degrees))
}
solar_angle_degrees(angle.correct)
# orientation_rad = compass angle relative to north = 0, in radians
# solar_azimuth_rad = solar azimuth for relevant location + time, in radians
# sigma = angle of substratum relative to horizontal (0 angle), in radians
# beta = solar elevation for relevant location + time, in radians
solar_angle_degrees <- function(df){
solar_angle_degrees = as.data.frame(((acos(sin(df$beta)*cos(df$sigma) + cos(abs(df$orientation_rad - df$solar_azimuth_rad))*cos(df$beta)*sin(df$sigma)))/(2*pi))*360)
df <- cbind(df,solar_angle_degrees)
}
solar_angle_degrees(angle.correct)
# orientation_rad = compass angle relative to north = 0, in radians
# solar_azimuth_rad = solar azimuth for relevant location + time, in radians
# sigma = angle of substratum relative to horizontal (0 angle), in radians
# beta = solar elevation for relevant location + time, in radians
solar_angle_degrees <- function(df){
solar_angle_degrees = as.data.frame(((acos(sin(df$beta)*cos(df$sigma) + cos(abs(df$orientation_rad - df$solar_azimuth_rad))*cos(df$beta)*sin(df$sigma)))/(2*pi))*360)
}
solar_angle_degrees(angle.correct)
test <- solar_angle_degrees(angle.correct)
View(test)
# orientation_rad = compass angle relative to north = 0, in radians
# solar_azimuth_rad = solar azimuth for relevant location + time, in radians
# sigma = angle of substratum relative to horizontal (0 angle), in radians
# beta = solar elevation for relevant location + time, in radians
solar_angle_degrees <- function(df){
solar_angle_degrees = ((acos(sin(df$beta)*cos(df$sigma) + cos(abs(df$orientation_rad - df$solar_azimuth_rad))*cos(df$beta)*sin(df$sigma)))/(2*pi))*360
solar_angle_degrees <- as.data.frame(solar_angle_degrees)
df <- cbind(df, solar_angle_degrees)
}
test <- solar_angle_degrees(angle.correct)
View(test)
